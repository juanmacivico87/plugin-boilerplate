<?xml version="1.0"?>
<ruleset name="My Custom PHPCS">
    <description>Sniffs for the coding standards of your project.</description>
    <file>.</file>
    <!-- Exclude the main file -->
    <exclude-pattern>plugin-boilerplate.php</exclude-pattern>
    <!-- Exclude the Composer Vendor directory -->
    <exclude-pattern>/vendor/*</exclude-pattern>
    <!-- Just check php files -->
    <arg name="extensions" value="php"/>
    <!-- Colors! Nice! -->
    <arg name="colors"/>
    <!-- Full report -->
    <arg name="report" value="full"/>
    <!-- Bans the use of the PHP long array syntax -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <!-- Checks the declaration of the class and its inheritance is correct -->
    <rule ref="Squiz.Classes.ClassDeclaration"/>
    <!-- Tests that the file name and the name of the class contained within the file match -->
    <rule ref="Squiz.Classes.ClassFileName"/>
    <!-- Ensures classes don't contain duplicate property names -->
    <rule ref="Squiz.Classes.DuplicateProperty"/>
    <!-- Verifies that properties are declared correctly -->
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <!-- Ensures classes are in camel caps, and the first letter is capitalised -->
    <rule ref="Squiz.Classes.ValidClassName"/>
    <!-- This sniff class detected empty statement -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <!-- Detects unconditional if- and elseif-statements -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <!-- Parses and verifies the class doc comment -->
    <rule ref="Squiz.Commenting.ClassComment"/>
    <!-- Parses and verifies the doc comments for functions -->
    <rule ref="Squiz.Commenting.FunctionComment"/>
    <!-- Checks that the file does not end with a closing tag -->
    <rule ref="Zend.Files.ClosingTag"/>
    <!-- Ensures the file ends with a newline character -->
    <rule ref="PSR2.Files.EndFileNewline"/>
    <!-- Ensures there is no space after cast tokens -->
    <rule ref="Generic.Formatting.NoSpaceAfterCast"/>
    <!-- Checks that duplicate arguments are not used in function declarations -->
    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
    <!-- Checks that the opening brace of a function is on the line after the function declaration -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
    <!-- Ensures function params with default values are at the end of the declaration -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <!-- Checks that the closing brace of a function goes directly after the body -->
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>
    <!-- Ensures namespaces are declared correctly -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <!-- Ensures USE blocks are declared correctly -->
    <rule ref="PSR2.Namespaces.UseDeclaration"/>
    <!-- Ensures that constant names are all uppercase -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <!-- Ensures logical operators 'and' and 'or' are not used -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!-- Checks that the opening PHP tag is the first content in a file -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <!-- Discourages the use of deprecated PHP functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- Verifies that no alternative PHP tags are used -->
    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>
    <!-- Checks the indentation of embedded PHP code segments -->
    <rule ref="Squiz.PHP.EmbeddedPhp"/>
    <!-- Checks that all uses of true, false and null are lowercase -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <!-- Checks for usage of $this in static methods, which will cause runtime errors -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Makes sure that any strings that are "echoed" are not enclosed in brackets -->
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <!-- Checks that two strings are not concatenated together; suggests using one string instead -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <!-- Checks that there is no empty line after the opening brace of a function -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <!-- Ensure there is no whitespace before a semicolon -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
</ruleset>